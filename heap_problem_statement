# Challenging Seating Arrangement Problem (HEAP)

---

## Problem Statement

Sumit is currently doing his DSA course. He finds the problem given in the lab assignment quite easy. He usually completes the problem during lab hours itself. Seeing this, one of the TAs (coincidentally his name is also Sumit) of the course decided to make a challenging problem for this lab. The problem is as follows.

There is a group of N students in IITJ numbered 1 to N. They found out that they all like the same girl. Since then, each of them hates each other. Once an event was going on in LHB 110, and exactly one row of seats was available. Those N students came one by one, in the order of their number: firstly student 1, then student 2, then student 3, â€¦, and lastly student N. The number of seats in the row is K, numbered from 1 to K. The first and second students sat at seat number 1 and K respectively. Students numbered i (3 <= i <= N) chose the seat S_i such that their distance to any student seated before they came is maximized (basically, they want to sit as far from them as possible, see example test cases for more clarity). If there are multiple such seats, they choose the one with the minimum seat number.

Your task is to print the sum of seat numbers that these N students chose to sit. It can be proven that the sum of seat numbers they chose is unique.

---

## Input Format

The first and only line contains two spaced integers N and K.

---

## Output Format

Output a single integer denoting the sum of seat numbers they chose. Take care of overflow, use LONG LONG.

---

## Constraints

- 2 <= N <= 10^5
- 2 <= K <= 10^9
- N <= K

**Notes:**

1. Not all test cases will be large; you can score partial marks by passing partial test cases.

2. If you are implementing brute force (or your program takes too much time), you may have to wait longer (1 to 2 mins) to get the verdict.

3. **EXPECTED TIME COMPLEXITY:** O(N log(N)), it doesn't depend on K. But you may choose not to follow this.

---

## Sample Input 1

4 10

## Sample Output 1

19

## Explanation 1

After Student 1 comes:

Seat Number: 1 2 3 4 5 6 7 8 9 10

Student Number: 1

After Student 2 comes:

Seat Number: 1 2 3 4 5 6 7 8 9 10

Student Number: 1 2

After Student 3 comes:

Seat Number: 1 2 3 4 5 6 7 8 9 10

Student Number: 1 3 2

Student 3 chose seat number 5 as that is the farthest from both 1 and 2.

After Student 4 comes:

Seat Number: 1 2 3 4 5 6 7 8 9 10

Student Number: 1 4 3 2

Student 4 had three options: seat 3, seat 7, and seat 8. All these seats are at least 2 seats far from all others. He chose 3, the one with the minimum seat number. No seats exist that are 3 seats far from all others.

Sum of seat numbers they chose = 1 + 3 + 5 + 10 = 19

---

## Sample Input 2

5 15

## Sample Output 2

39

## Explanation 2

After Student 1 comes:

Seat Number: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15

Student Number: 1

After Student 2 comes:

Seat Number: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15

Student Number: 1 2

After Student 3 comes:

Seat Number: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15

Student Number: 1 3 2

After Student 4 comes:

Seat Number: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15

Student Number: 1 4 3 2

After Student 5 comes:

Seat Number: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15

Student Number: 1 4 3 5 2

Sum of seat numbers chosen = 1 + 4 + 8 + 11 + 15 = 39

---

**The below-mentioned test cases are not part of the evaluation; they are provided for your debugging purpose.**

**Sample Input for n <= 1000**

640 29481

**Sample Output**

8377413

**Sample Input for n <= 100000**

48235 987728339

**Sample Output**

20164488498300
